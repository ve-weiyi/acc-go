// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"acc/app/model/auth/entity"
)

func newTbUserAuth(db *gorm.DB, opts ...gen.DOOption) tbUserAuth {
	_tbUserAuth := tbUserAuth{}

	_tbUserAuth.tbUserAuthDo.UseDB(db, opts...)
	_tbUserAuth.tbUserAuthDo.UseModel(&entity.TbUserAuth{})

	tableName := _tbUserAuth.tbUserAuthDo.TableName()
	_tbUserAuth.ALL = field.NewAsterisk(tableName)
	_tbUserAuth.ID = field.NewInt(tableName, "id")
	_tbUserAuth.UserInfoID = field.NewInt(tableName, "user_info_id")
	_tbUserAuth.Username = field.NewString(tableName, "username")
	_tbUserAuth.Password = field.NewString(tableName, "password")
	_tbUserAuth.LoginType = field.NewInt(tableName, "login_type")
	_tbUserAuth.IPAddress = field.NewString(tableName, "ip_address")
	_tbUserAuth.IPSource = field.NewString(tableName, "ip_source")
	_tbUserAuth.CreateTime = field.NewTime(tableName, "create_time")
	_tbUserAuth.UpdateTime = field.NewTime(tableName, "update_time")
	_tbUserAuth.LastLoginTime = field.NewTime(tableName, "last_login_time")

	_tbUserAuth.fillFieldMap()

	return _tbUserAuth
}

type tbUserAuth struct {
	tbUserAuthDo

	ALL           field.Asterisk
	ID            field.Int
	UserInfoID    field.Int    // 用户信息id
	Username      field.String // 用户名
	Password      field.String // 密码
	LoginType     field.Int    // 登录类型
	IPAddress     field.String // 用户登录ip
	IPSource      field.String // ip来源
	CreateTime    field.Time   // 创建时间
	UpdateTime    field.Time   // 更新时间
	LastLoginTime field.Time   // 上次登录时间

	fieldMap map[string]field.Expr
}

func (t tbUserAuth) Table(newTableName string) *tbUserAuth {
	t.tbUserAuthDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbUserAuth) As(alias string) *tbUserAuth {
	t.tbUserAuthDo.DO = *(t.tbUserAuthDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbUserAuth) updateTableName(table string) *tbUserAuth {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt(table, "id")
	t.UserInfoID = field.NewInt(table, "user_info_id")
	t.Username = field.NewString(table, "username")
	t.Password = field.NewString(table, "password")
	t.LoginType = field.NewInt(table, "login_type")
	t.IPAddress = field.NewString(table, "ip_address")
	t.IPSource = field.NewString(table, "ip_source")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.LastLoginTime = field.NewTime(table, "last_login_time")

	t.fillFieldMap()

	return t
}

func (t *tbUserAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbUserAuth) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_info_id"] = t.UserInfoID
	t.fieldMap["username"] = t.Username
	t.fieldMap["password"] = t.Password
	t.fieldMap["login_type"] = t.LoginType
	t.fieldMap["ip_address"] = t.IPAddress
	t.fieldMap["ip_source"] = t.IPSource
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["last_login_time"] = t.LastLoginTime
}

func (t tbUserAuth) clone(db *gorm.DB) tbUserAuth {
	t.tbUserAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbUserAuth) replaceDB(db *gorm.DB) tbUserAuth {
	t.tbUserAuthDo.ReplaceDB(db)
	return t
}

type tbUserAuthDo struct{ gen.DO }

func (t tbUserAuthDo) Debug() *tbUserAuthDo {
	return t.withDO(t.DO.Debug())
}

func (t tbUserAuthDo) WithContext(ctx context.Context) *tbUserAuthDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbUserAuthDo) ReadDB() *tbUserAuthDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbUserAuthDo) WriteDB() *tbUserAuthDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbUserAuthDo) Session(config *gorm.Session) *tbUserAuthDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbUserAuthDo) Clauses(conds ...clause.Expression) *tbUserAuthDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbUserAuthDo) Returning(value interface{}, columns ...string) *tbUserAuthDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbUserAuthDo) Not(conds ...gen.Condition) *tbUserAuthDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbUserAuthDo) Or(conds ...gen.Condition) *tbUserAuthDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbUserAuthDo) Select(conds ...field.Expr) *tbUserAuthDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbUserAuthDo) Where(conds ...gen.Condition) *tbUserAuthDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbUserAuthDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tbUserAuthDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tbUserAuthDo) Order(conds ...field.Expr) *tbUserAuthDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbUserAuthDo) Distinct(cols ...field.Expr) *tbUserAuthDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbUserAuthDo) Omit(cols ...field.Expr) *tbUserAuthDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbUserAuthDo) Join(table schema.Tabler, on ...field.Expr) *tbUserAuthDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbUserAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tbUserAuthDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbUserAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) *tbUserAuthDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbUserAuthDo) Group(cols ...field.Expr) *tbUserAuthDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbUserAuthDo) Having(conds ...gen.Condition) *tbUserAuthDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbUserAuthDo) Limit(limit int) *tbUserAuthDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbUserAuthDo) Offset(offset int) *tbUserAuthDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbUserAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tbUserAuthDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbUserAuthDo) Unscoped() *tbUserAuthDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbUserAuthDo) Create(values ...*entity.TbUserAuth) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbUserAuthDo) CreateInBatches(values []*entity.TbUserAuth, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbUserAuthDo) Save(values ...*entity.TbUserAuth) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbUserAuthDo) First() (*entity.TbUserAuth, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbUserAuth), nil
	}
}

func (t tbUserAuthDo) Take() (*entity.TbUserAuth, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbUserAuth), nil
	}
}

func (t tbUserAuthDo) Last() (*entity.TbUserAuth, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbUserAuth), nil
	}
}

func (t tbUserAuthDo) Find() ([]*entity.TbUserAuth, error) {
	result, err := t.DO.Find()
	return result.([]*entity.TbUserAuth), err
}

func (t tbUserAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.TbUserAuth, err error) {
	buf := make([]*entity.TbUserAuth, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbUserAuthDo) FindInBatches(result *[]*entity.TbUserAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbUserAuthDo) Attrs(attrs ...field.AssignExpr) *tbUserAuthDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbUserAuthDo) Assign(attrs ...field.AssignExpr) *tbUserAuthDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbUserAuthDo) Joins(fields ...field.RelationField) *tbUserAuthDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbUserAuthDo) Preload(fields ...field.RelationField) *tbUserAuthDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbUserAuthDo) FirstOrInit() (*entity.TbUserAuth, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbUserAuth), nil
	}
}

func (t tbUserAuthDo) FirstOrCreate() (*entity.TbUserAuth, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.TbUserAuth), nil
	}
}

func (t tbUserAuthDo) FindByPage(offset int, limit int) (result []*entity.TbUserAuth, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbUserAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbUserAuthDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbUserAuthDo) Delete(models ...*entity.TbUserAuth) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbUserAuthDo) withDO(do gen.Dao) *tbUserAuthDo {
	t.DO = *do.(*gen.DO)
	return t
}
