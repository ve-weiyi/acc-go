// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"acc/app/model/entity"
)

func newUserAuth(db *gorm.DB, opts ...gen.DOOption) userAuth {
	_userAuth := userAuth{}

	_userAuth.userAuthDo.UseDB(db, opts...)
	_userAuth.userAuthDo.UseModel(&entity.UserAuth{})

	tableName := _userAuth.userAuthDo.TableName()
	_userAuth.ALL = field.NewAsterisk(tableName)
	_userAuth.ID = field.NewInt(tableName, "id")
	_userAuth.Username = field.NewString(tableName, "username")
	_userAuth.Password = field.NewString(tableName, "password")

	_userAuth.fillFieldMap()

	return _userAuth
}

type userAuth struct {
	userAuthDo

	ALL      field.Asterisk
	ID       field.Int
	Username field.String
	Password field.String

	fieldMap map[string]field.Expr
}

func (u userAuth) Table(newTableName string) *userAuth {
	u.userAuthDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAuth) As(alias string) *userAuth {
	u.userAuthDo.DO = *(u.userAuthDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAuth) updateTableName(table string) *userAuth {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.Username = field.NewString(table, "username")
	u.Password = field.NewString(table, "password")

	u.fillFieldMap()

	return u
}

func (u *userAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAuth) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["password"] = u.Password
}

func (u userAuth) clone(db *gorm.DB) userAuth {
	u.userAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAuth) replaceDB(db *gorm.DB) userAuth {
	u.userAuthDo.ReplaceDB(db)
	return u
}

type userAuthDo struct{ gen.DO }

func (u userAuthDo) Debug() *userAuthDo {
	return u.withDO(u.DO.Debug())
}

func (u userAuthDo) WithContext(ctx context.Context) *userAuthDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAuthDo) ReadDB() *userAuthDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAuthDo) WriteDB() *userAuthDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAuthDo) Session(config *gorm.Session) *userAuthDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAuthDo) Clauses(conds ...clause.Expression) *userAuthDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAuthDo) Returning(value interface{}, columns ...string) *userAuthDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAuthDo) Not(conds ...gen.Condition) *userAuthDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAuthDo) Or(conds ...gen.Condition) *userAuthDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAuthDo) Select(conds ...field.Expr) *userAuthDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAuthDo) Where(conds ...gen.Condition) *userAuthDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAuthDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *userAuthDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userAuthDo) Order(conds ...field.Expr) *userAuthDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAuthDo) Distinct(cols ...field.Expr) *userAuthDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAuthDo) Omit(cols ...field.Expr) *userAuthDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAuthDo) Join(table schema.Tabler, on ...field.Expr) *userAuthDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userAuthDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) *userAuthDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAuthDo) Group(cols ...field.Expr) *userAuthDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAuthDo) Having(conds ...gen.Condition) *userAuthDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAuthDo) Limit(limit int) *userAuthDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAuthDo) Offset(offset int) *userAuthDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userAuthDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAuthDo) Unscoped() *userAuthDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAuthDo) Create(values ...*entity.UserAuth) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAuthDo) CreateInBatches(values []*entity.UserAuth, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAuthDo) Save(values ...*entity.UserAuth) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAuthDo) First() (*entity.UserAuth, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserAuth), nil
	}
}

func (u userAuthDo) Take() (*entity.UserAuth, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserAuth), nil
	}
}

func (u userAuthDo) Last() (*entity.UserAuth, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserAuth), nil
	}
}

func (u userAuthDo) Find() ([]*entity.UserAuth, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserAuth), err
}

func (u userAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserAuth, err error) {
	buf := make([]*entity.UserAuth, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAuthDo) FindInBatches(result *[]*entity.UserAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAuthDo) Attrs(attrs ...field.AssignExpr) *userAuthDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAuthDo) Assign(attrs ...field.AssignExpr) *userAuthDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAuthDo) Joins(fields ...field.RelationField) *userAuthDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAuthDo) Preload(fields ...field.RelationField) *userAuthDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAuthDo) FirstOrInit() (*entity.UserAuth, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserAuth), nil
	}
}

func (u userAuthDo) FirstOrCreate() (*entity.UserAuth, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserAuth), nil
	}
}

func (u userAuthDo) FindByPage(offset int, limit int) (result []*entity.UserAuth, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAuthDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAuthDo) Delete(models ...*entity.UserAuth) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAuthDo) withDO(do gen.Dao) *userAuthDo {
	u.DO = *do.(*gen.DO)
	return u
}
